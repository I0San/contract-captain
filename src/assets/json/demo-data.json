{"projects":"[{\"id\":\"IoSanX696IQBDnOmIs\",\"name\":\"Ethereum\",\"contracts\":[{\"id\":\"cI_I5Z9uO8squxzwn83yE\",\"address\":\"1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\"name\":\"Uniswap (UNI)\",\"abi\":\"[\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"minter_\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"mintingAllowedAfter_\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"amount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Approval\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"delegator\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"fromDelegate\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"toDelegate\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"DelegateChanged\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"delegate\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"previousBalance\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"newBalance\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"DelegateVotesChanged\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"minter\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"newMinter\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"MinterChanged\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"from\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"amount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Transfer\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"DELEGATION_TYPEHASH\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bytes32\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"DOMAIN_TYPEHASH\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bytes32\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"PERMIT_TYPEHASH\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bytes32\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"allowance\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"rawAmount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"approve\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"balanceOf\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint32\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint32\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"checkpoints\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint32\\\",\\n        \\\"name\\\": \\\"fromBlock\\\",\\n        \\\"type\\\": \\\"uint32\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint96\\\",\\n        \\\"name\\\": \\\"votes\\\",\\n        \\\"type\\\": \\\"uint96\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"decimals\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint8\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint8\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"delegatee\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"delegate\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"delegatee\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"nonce\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"expiry\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint8\\\",\\n        \\\"name\\\": \\\"v\\\",\\n        \\\"type\\\": \\\"uint8\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"bytes32\\\",\\n        \\\"name\\\": \\\"r\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"bytes32\\\",\\n        \\\"name\\\": \\\"s\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"delegateBySig\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"delegates\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"getCurrentVotes\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint96\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint96\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"blockNumber\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"getPriorVotes\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint96\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint96\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"minimumTimeBetweenMints\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint32\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint32\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"dst\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"rawAmount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"mint\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"mintCap\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint8\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint8\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"minter\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"mintingAllowedAfter\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"name\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"nonces\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"numCheckpoints\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint32\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint32\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"rawAmount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"deadline\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint8\\\",\\n        \\\"name\\\": \\\"v\\\",\\n        \\\"type\\\": \\\"uint8\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"bytes32\\\",\\n        \\\"name\\\": \\\"r\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"bytes32\\\",\\n        \\\"name\\\": \\\"s\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"permit\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"minter_\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"setMinter\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"symbol\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"totalSupply\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"dst\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"rawAmount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"transfer\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"src\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"dst\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"rawAmount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"transferFrom\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\",\"code\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-09-16\\n*/\\n\\n/**\\n *Submitted for verification at Etherscan.io on 2020-09-15\\n*/\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract Uni {\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Uniswap\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"UNI\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint public totalSupply = 1_000_000_000e18; // 1 billion Uni\\n\\n    /// @notice Address which may mint new tokens\\n    address public minter;\\n\\n    /// @notice The timestamp after which minting may occur\\n    uint public mintingAllowedAfter;\\n\\n    /// @notice Minimum time between mints\\n    uint32 public constant minimumTimeBetweenMints = 1 days * 365;\\n\\n    /// @notice Cap on the percentage of totalSupply that can be minted at each mint\\n    uint8 public constant mintCap = 2;\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping (address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when the minter address is changed\\n    event MinterChanged(address minter, address newMinter);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new Uni token\\n     * @param account The initial account to grant all the tokens\\n     * @param minter_ The account with minting ability\\n     * @param mintingAllowedAfter_ The timestamp after which minting may occur\\n     */\\n    constructor(address account, address minter_, uint mintingAllowedAfter_) public {\\n        require(mintingAllowedAfter_ >= block.timestamp, \\\"Uni::constructor: minting can only begin after deployment\\\");\\n\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n        minter = minter_;\\n        emit MinterChanged(address(0), minter);\\n        mintingAllowedAfter = mintingAllowedAfter_;\\n    }\\n\\n    /**\\n     * @notice Change the minter address\\n     * @param minter_ The address of the new minter\\n     */\\n    function setMinter(address minter_) external {\\n        require(msg.sender == minter, \\\"Uni::setMinter: only the minter can change the minter address\\\");\\n        emit MinterChanged(minter, minter_);\\n        minter = minter_;\\n    }\\n\\n    /**\\n     * @notice Mint new tokens\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to be minted\\n     */\\n    function mint(address dst, uint rawAmount) external {\\n        require(msg.sender == minter, \\\"Uni::mint: only the minter can mint\\\");\\n        require(block.timestamp >= mintingAllowedAfter, \\\"Uni::mint: minting not allowed yet\\\");\\n        require(dst != address(0), \\\"Uni::mint: cannot transfer to the zero address\\\");\\n\\n        // record the mint\\n        mintingAllowedAfter = SafeMath.add(block.timestamp, minimumTimeBetweenMints);\\n\\n        // mint the amount\\n        uint96 amount = safe96(rawAmount, \\\"Uni::mint: amount exceeds 96 bits\\\");\\n        require(amount <= SafeMath.div(SafeMath.mul(totalSupply, mintCap), 100), \\\"Uni::mint: exceeded mint cap\\\");\\n        totalSupply = safe96(SafeMath.add(totalSupply, amount), \\\"Uni::mint: totalSupply exceeds 96 bits\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[dst] = add96(balances[dst], amount, \\\"Uni::mint: transfer amount overflows\\\");\\n        emit Transfer(address(0), dst, amount);\\n\\n        // move delegates\\n        _moveDelegates(address(0), delegates[dst], amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"Uni::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"Uni::permit: amount exceeds 96 bits\\\");\\n        }\\n\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Uni::permit: invalid signature\\\");\\n        require(signatory == owner, \\\"Uni::permit: unauthorized\\\");\\n        require(now <= deadline, \\\"Uni::permit: signature expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"Uni::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"Uni::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"Uni::transferFrom: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Uni::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"Uni::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"Uni::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"Uni::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"Uni::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Uni::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"Uni::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"Uni::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"Uni::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"Uni::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"Uni::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\"},{\"id\":\"oHH9iFL33u3MTFymN3nPM\",\"address\":\"7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\",\"name\":\"Matic Token (MATIC)\",\"abi\":\"[\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"name\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"value\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"approve\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"totalSupply\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"from\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"value\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"transferFrom\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"decimals\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint8\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"addedValue\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"increaseAllowance\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"success\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"unpause\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"isPauser\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"paused\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"renouncePauser\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"balanceOf\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"addPauser\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"pause\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"symbol\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"subtractedValue\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"decreaseAllowance\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"success\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"value\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"transfer\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"allowance\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"name\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"symbol\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"decimals\\\",\\n        \\\"type\\\": \\\"uint8\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"totalSupply\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Paused\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Unpaused\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"PauserAdded\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"account\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"PauserRemoved\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"from\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"value\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Transfer\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"value\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Approval\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  }\\n]\",\"code\":\"/**\\n *Submitted for verification at Etherscan.io on 2019-04-20\\n*/\\n\\npragma solidity 0.5.2;\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n * Originally based on code by FirstBlood:\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n *\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n * compliant implementations may not do it.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param owner The address to query the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address owner) public view returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param owner address The address which owns the funds.\\n     * @param spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    */\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n     * and other compliant implementations may not emit the event.\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified addresses\\n    * @param from The address to transfer from.\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        require(to != address(0));\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n     * an account. This encapsulates the modification of balances such that the\\n     * proper events are emitted.\\n     * @param account The account that will receive the created tokens.\\n     * @param value The amount that will be created.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n        emit Transfer(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account.\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account, deducting from the sender's allowance for said account. Uses the\\n     * internal burn function.\\n     * Emits an Approval event (reflecting the reduced allowance).\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burnFrom(address account, uint256 value) internal {\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n        _burn(account, value);\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/access/Roles.sol\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev give an account access to this role\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(account != address(0));\\n        require(!has(role, account));\\n\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev remove an account's access to this role\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(account != address(0));\\n        require(has(role, account));\\n\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev check if an account has this role\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0));\\n        return role.bearer[account];\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\ncontract PauserRole {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    constructor () internal {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender));\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is PauserRole {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @return true if the contract is paused, false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\\n\\n/**\\n * @title Pausable token\\n * @dev ERC20 modified with pausable transfers.\\n **/\\ncontract ERC20Pausable is ERC20, Pausable {\\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n/**\\n * @title ERC20Detailed token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @return the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @return the symbol of the token.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @return the number of decimals of the token.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\n// File: contracts/MaticToken.sol\\n\\ncontract MaticToken is ERC20Pausable, ERC20Detailed {\\n    constructor (string memory name, string memory symbol, uint8 decimals, uint256 totalSupply)\\n    public\\n    ERC20Detailed (name, symbol, decimals) {\\n        _mint(msg.sender, totalSupply);\\n    }\\n}\"},{\"id\":\"mATbhhJ0ViR9l--LgSVXv\",\"address\":\"BC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\",\"name\":\"BoredApeYachtClub\",\"abi\":\"[\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"name\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"symbol\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"maxNftSupply\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"saleStart\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"approved\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Approval\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"operator\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"approved\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"ApprovalForAll\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"previousOwner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"newOwner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"OwnershipTransferred\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"from\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Transfer\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"BAYC_PROVENANCE\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"MAX_APES\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"REVEAL_TIMESTAMP\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"apePrice\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"approve\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"balanceOf\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"baseURI\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"emergencySetStartingIndexBlock\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"flipSaleState\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"getApproved\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"operator\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"isApprovedForAll\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"maxApePurchase\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"numberOfTokens\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"mintApe\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"payable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"name\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"owner\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"ownerOf\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"renounceOwnership\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"reserveApes\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"from\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"safeTransferFrom\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"from\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"bytes\\\",\\n        \\\"name\\\": \\\"_data\\\",\\n        \\\"type\\\": \\\"bytes\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"safeTransferFrom\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"saleIsActive\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"operator\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"approved\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"setApprovalForAll\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"baseURI\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"setBaseURI\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"provenanceHash\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"setProvenanceHash\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"revealTimeStamp\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"setRevealTimestamp\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"setStartingIndex\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"startingIndex\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"startingIndexBlock\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bytes4\\\",\\n        \\\"name\\\": \\\"interfaceId\\\",\\n        \\\"type\\\": \\\"bytes4\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"supportsInterface\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"symbol\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"index\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"tokenByIndex\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"index\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"tokenOfOwnerByIndex\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"tokenURI\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"totalSupply\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"from\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"tokenId\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"transferFrom\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"newOwner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"transferOwnership\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"withdraw\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\",\"code\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-04-22\\n*/\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/introspection/IERC165.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\n\\n\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\n\\n\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\n\\n\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/introspection/ERC165.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableMap.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: contracts/BoredApeYachtClub.sol\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\n\\n/**\\n * @title BoredApeYachtClub contract\\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\\n */\\ncontract BoredApeYachtClub is ERC721, Ownable {\\n    using SafeMath for uint256;\\n\\n    string public BAYC_PROVENANCE = \\\"\\\";\\n\\n    uint256 public startingIndexBlock;\\n\\n    uint256 public startingIndex;\\n\\n    uint256 public constant apePrice = 80000000000000000; //0.08 ETH\\n\\n    uint public constant maxApePurchase = 20;\\n\\n    uint256 public MAX_APES;\\n\\n    bool public saleIsActive = false;\\n\\n    uint256 public REVEAL_TIMESTAMP;\\n\\n    constructor(string memory name, string memory symbol, uint256 maxNftSupply, uint256 saleStart) ERC721(name, symbol) {\\n        MAX_APES = maxNftSupply;\\n        REVEAL_TIMESTAMP = saleStart + (86400 * 9);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint balance = address(this).balance;\\n        msg.sender.transfer(balance);\\n    }\\n\\n    /**\\n     * Set some Bored Apes aside\\n     */\\n    function reserveApes() public onlyOwner {        \\n        uint supply = totalSupply();\\n        uint i;\\n        for (i = 0; i < 30; i++) {\\n            _safeMint(msg.sender, supply + i);\\n        }\\n    }\\n\\n    /**\\n     * DM Gargamel in Discord that you're standing right behind him.\\n     */\\n    function setRevealTimestamp(uint256 revealTimeStamp) public onlyOwner {\\n        REVEAL_TIMESTAMP = revealTimeStamp;\\n    } \\n\\n    /*     \\n    * Set provenance once it's calculated\\n    */\\n    function setProvenanceHash(string memory provenanceHash) public onlyOwner {\\n        BAYC_PROVENANCE = provenanceHash;\\n    }\\n\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /*\\n    * Pause sale if active, make active if paused\\n    */\\n    function flipSaleState() public onlyOwner {\\n        saleIsActive = !saleIsActive;\\n    }\\n\\n    /**\\n    * Mints Bored Apes\\n    */\\n    function mintApe(uint numberOfTokens) public payable {\\n        require(saleIsActive, \\\"Sale must be active to mint Ape\\\");\\n        require(numberOfTokens <= maxApePurchase, \\\"Can only mint 20 tokens at a time\\\");\\n        require(totalSupply().add(numberOfTokens) <= MAX_APES, \\\"Purchase would exceed max supply of Apes\\\");\\n        require(apePrice.mul(numberOfTokens) <= msg.value, \\\"Ether value sent is not correct\\\");\\n        \\n        for(uint i = 0; i < numberOfTokens; i++) {\\n            uint mintIndex = totalSupply();\\n            if (totalSupply() < MAX_APES) {\\n                _safeMint(msg.sender, mintIndex);\\n            }\\n        }\\n\\n        // If we haven't set the starting index and this is either 1) the last saleable token or 2) the first token to be sold after\\n        // the end of pre-sale, set the starting index block\\n        if (startingIndexBlock == 0 && (totalSupply() == MAX_APES || block.timestamp >= REVEAL_TIMESTAMP)) {\\n            startingIndexBlock = block.number;\\n        } \\n    }\\n\\n    /**\\n     * Set the starting index for the collection\\n     */\\n    function setStartingIndex() public {\\n        require(startingIndex == 0, \\\"Starting index is already set\\\");\\n        require(startingIndexBlock != 0, \\\"Starting index block must be set\\\");\\n        \\n        startingIndex = uint(blockhash(startingIndexBlock)) % MAX_APES;\\n        // Just a sanity case in the worst case if this function is called late (EVM only stores last 256 block hashes)\\n        if (block.number.sub(startingIndexBlock) > 255) {\\n            startingIndex = uint(blockhash(block.number - 1)) % MAX_APES;\\n        }\\n        // Prevent default sequence\\n        if (startingIndex == 0) {\\n            startingIndex = startingIndex.add(1);\\n        }\\n    }\\n\\n    /**\\n     * Set the starting index block for the collection, essentially unblocking\\n     * setting starting index\\n     */\\n    function emergencySetStartingIndexBlock() public onlyOwner {\\n        require(startingIndex == 0, \\\"Starting index is already set\\\");\\n        \\n        startingIndexBlock = block.number;\\n    }\\n}\"},{\"id\":\"ape1OPSJGEWaW4nW7KoOH\",\"address\":\"9f8F72aA9304c8B593d555F12eF6589cC3A579A2\",\"name\":\"Maker (MKR)\",\"abi\":\"[\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"name\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"stop\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"guy\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"approve\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"owner_\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"setOwner\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"totalSupply\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"src\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"dst\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"transferFrom\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"decimals\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"guy\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"mint\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"burn\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"name_\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"setName\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"src\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"balanceOf\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"stopped\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"authority_\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"setAuthority\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"owner\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"symbol\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"guy\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"burn\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"mint\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"dst\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"transfer\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"dst\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"push\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"src\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"dst\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"move\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"start\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"authority\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"guy\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"approve\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"src\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"guy\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"allowance\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"constant\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"src\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"pull\\\",\\n    \\\"outputs\\\": [],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"symbol_\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"guy\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Mint\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"guy\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Burn\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"authority\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"LogSetAuthority\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"LogSetOwner\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": true,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"sig\\\",\\n        \\\"type\\\": \\\"bytes4\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"guy\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"foo\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"bar\\\",\\n        \\\"type\\\": \\\"bytes32\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"wad\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"fax\\\",\\n        \\\"type\\\": \\\"bytes\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"LogNote\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"from\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"to\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"value\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Transfer\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"owner\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"name\\\": \\\"spender\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": false,\\n        \\\"name\\\": \\\"value\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"Approval\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  }\\n]\",\"code\":\"/**\\n *Submitted for verification at Etherscan.io on 2017-11-25\\n*/\\n\\n// MKR Token\\n\\n// hevm: flattened sources of src/mkr-499.sol\\npragma solidity ^0.4.15;\\n\\n////// lib/ds-roles/lib/ds-auth/src/auth.sol\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/* pragma solidity ^0.4.13; */\\n\\ncontract DSAuthority {\\n    function canCall(\\n        address src, address dst, bytes4 sig\\n    ) public view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority (address indexed authority);\\n    event LogSetOwner     (address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority  public  authority;\\n    address      public  owner;\\n\\n    function DSAuth() public {\\n        owner = msg.sender;\\n        LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_)\\n        public\\n        auth\\n    {\\n        owner = owner_;\\n        LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_)\\n        public\\n        auth\\n    {\\n        authority = authority_;\\n        LogSetAuthority(authority);\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender, msg.sig));\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(0)) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, this, sig);\\n        }\\n    }\\n}\\n\\n////// lib/ds-thing/lib/ds-math/src/math.sol\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/* pragma solidity ^0.4.13; */\\n\\ncontract DSMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x <= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x >= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x <= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\\n////// lib/ds-thing/lib/ds-note/src/note.sol\\n/// note.sol -- the `note' modifier, for logging calls as events\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/* pragma solidity ^0.4.13; */\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4   indexed  sig,\\n        address  indexed  guy,\\n        bytes32  indexed  foo,\\n        bytes32  indexed  bar,\\n        uint              wad,\\n        bytes             fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n        }\\n\\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\\n\\n        _;\\n    }\\n}\\n\\n////// lib/ds-thing/src/thing.sol\\n// thing.sol - `auth` with handy mixins. your things should be DSThings\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/* pragma solidity ^0.4.13; */\\n\\n/* import 'ds-auth/auth.sol'; */\\n/* import 'ds-note/note.sol'; */\\n/* import 'ds-math/math.sol'; */\\n\\ncontract DSThing is DSAuth, DSNote, DSMath {\\n}\\n\\n////// lib/ds-token/lib/ds-stop/src/stop.sol\\n/// stop.sol -- mixin for enable/disable functionality\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/* pragma solidity ^0.4.13; */\\n\\n/* import \\\"ds-auth/auth.sol\\\"; */\\n/* import \\\"ds-note/note.sol\\\"; */\\n\\ncontract DSStop is DSNote, DSAuth {\\n\\n    bool public stopped;\\n\\n    modifier stoppable {\\n        require(!stopped);\\n        _;\\n    }\\n    function stop() public auth note {\\n        stopped = true;\\n    }\\n    function start() public auth note {\\n        stopped = false;\\n    }\\n\\n}\\n\\n////// lib/ds-token/lib/erc20/src/erc20.sol\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/* pragma solidity ^0.4.8; */\\n\\n// Token standard API\\n// https://github.com/ethereum/EIPs/issues/20\\n\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint supply);\\n    function balanceOf( address who ) public view returns (uint value);\\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\\n\\n    function transfer( address to, uint value) public returns (bool ok);\\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\\n    function approve( address spender, uint value ) public returns (bool ok);\\n\\n    event Transfer( address indexed from, address indexed to, uint value);\\n    event Approval( address indexed owner, address indexed spender, uint value);\\n}\\n\\n////// lib/ds-token/src/base.sol\\n/// base.sol -- basic ERC20 implementation\\n\\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/* pragma solidity ^0.4.13; */\\n\\n/* import \\\"erc20/erc20.sol\\\"; */\\n/* import \\\"ds-math/math.sol\\\"; */\\n\\ncontract DSTokenBase is ERC20, DSMath {\\n    uint256                                            _supply;\\n    mapping (address => uint256)                       _balances;\\n    mapping (address => mapping (address => uint256))  _approvals;\\n\\n    function DSTokenBase(uint supply) public {\\n        _balances[msg.sender] = supply;\\n        _supply = supply;\\n    }\\n\\n    function totalSupply() public view returns (uint) {\\n        return _supply;\\n    }\\n    function balanceOf(address src) public view returns (uint) {\\n        return _balances[src];\\n    }\\n    function allowance(address src, address guy) public view returns (uint) {\\n        return _approvals[src][guy];\\n    }\\n\\n    function transfer(address dst, uint wad) public returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(address src, address dst, uint wad)\\n        public\\n        returns (bool)\\n    {\\n        if (src != msg.sender) {\\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\\n        }\\n\\n        _balances[src] = sub(_balances[src], wad);\\n        _balances[dst] = add(_balances[dst], wad);\\n\\n        Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n\\n    function approve(address guy, uint wad) public returns (bool) {\\n        _approvals[msg.sender][guy] = wad;\\n\\n        Approval(msg.sender, guy, wad);\\n\\n        return true;\\n    }\\n}\\n\\n////// lib/ds-token/src/token.sol\\n/// token.sol -- ERC20 implementation with minting and burning\\n\\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/* pragma solidity ^0.4.13; */\\n\\n/* import \\\"ds-stop/stop.sol\\\"; */\\n\\n/* import \\\"./base.sol\\\"; */\\n\\ncontract DSToken is DSTokenBase(0), DSStop {\\n\\n    bytes32  public  symbol;\\n    uint256  public  decimals = 18; // standard token precision. override to customize\\n\\n    function DSToken(bytes32 symbol_) public {\\n        symbol = symbol_;\\n    }\\n\\n    event Mint(address indexed guy, uint wad);\\n    event Burn(address indexed guy, uint wad);\\n\\n    function approve(address guy) public stoppable returns (bool) {\\n        return super.approve(guy, uint(-1));\\n    }\\n\\n    function approve(address guy, uint wad) public stoppable returns (bool) {\\n        return super.approve(guy, wad);\\n    }\\n\\n    function transferFrom(address src, address dst, uint wad)\\n        public\\n        stoppable\\n        returns (bool)\\n    {\\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\\n        }\\n\\n        _balances[src] = sub(_balances[src], wad);\\n        _balances[dst] = add(_balances[dst], wad);\\n\\n        Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n\\n    function push(address dst, uint wad) public {\\n        transferFrom(msg.sender, dst, wad);\\n    }\\n    function pull(address src, uint wad) public {\\n        transferFrom(src, msg.sender, wad);\\n    }\\n    function move(address src, address dst, uint wad) public {\\n        transferFrom(src, dst, wad);\\n    }\\n\\n    function mint(uint wad) public {\\n        mint(msg.sender, wad);\\n    }\\n    function burn(uint wad) public {\\n        burn(msg.sender, wad);\\n    }\\n    function mint(address guy, uint wad) public auth stoppable {\\n        _balances[guy] = add(_balances[guy], wad);\\n        _supply = add(_supply, wad);\\n        Mint(guy, wad);\\n    }\\n    function burn(address guy, uint wad) public auth stoppable {\\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\\n        }\\n\\n        _balances[guy] = sub(_balances[guy], wad);\\n        _supply = sub(_supply, wad);\\n        Burn(guy, wad);\\n    }\\n\\n    // Optional token name\\n    bytes32   public  name = \\\"\\\";\\n\\n    function setName(bytes32 name_) public auth {\\n        name = name_;\\n    }\\n}\"}],\"chain\":\"1\"},{\"id\":\"sw2DD9uRcrRPb6Uz7fg1v\",\"name\":\"Goerli\",\"contracts\":[{\"id\":\"khjeQHFFbp8Cy-NQX6Y-W\",\"address\":\"dC4f3d2eC113f0fC41599Eb014C62ED9Ed6D790B\",\"name\":\"Miyogi - Goerli\",\"abi\":\"[\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"caretaker\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"amount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"CaretakerLoved\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"clean\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"feed\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"play\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"sleep\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getAlive\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getBoredom\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getHunger\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getSleepiness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getStatus\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getUncleanliness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"love\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\",\"code\":\"// SPDX-License-Identifier: Unlicense\\n\\n/*\\n  Miyogi Pet by IoSan\\n  (forked from wagmi by dom)\\n*/\\n\\npragma solidity ^0.8.17;\\n\\ncontract Miyogi {\\n    address _owner;\\n    bool _birthed;\\n    \\n    event CaretakerLoved(address indexed caretaker, uint256 indexed amount);\\n    \\n    uint256 lastFeedBlock;\\n    uint256 lastCleanBlock;\\n    uint256 lastPlayBlock;\\n    uint256 lastSleepBlock;\\n    \\n    uint8 internal hunger;\\n    uint8 internal uncleanliness;\\n    uint8 internal boredom;\\n    uint8 internal sleepiness;\\n    \\n    mapping (address => uint256) public love;\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == _owner);\\n        _;\\n    }\\n    \\n    constructor() {\\n        _owner = msg.sender;\\n        lastFeedBlock = block.number;\\n        lastCleanBlock = block.number;\\n        lastPlayBlock = block.number;\\n        lastSleepBlock = block.number;\\n        \\n        hunger = 0;\\n        uncleanliness = 0;\\n        boredom = 0;\\n        sleepiness = 0;\\n    }\\n    \\n    function addLove(address caretaker, uint256 amount) internal {\\n        love[caretaker] += amount;\\n        emit CaretakerLoved(caretaker, amount);\\n    }\\n    \\n    function feed() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getBoredom() < 80, \\\"im too tired to eat\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to eat\\\");\\n        // require(getHunger() > 0, \\\"i dont need to eat\\\");\\n        \\n        lastFeedBlock = block.number;\\n        \\n        hunger = 0;\\n        boredom += 10;\\n        uncleanliness += 3;\\n\\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function clean() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() > 0, \\\"i dont need a bath\\\");\\n        lastCleanBlock = block.number;\\n        \\n        uncleanliness = 0;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function play() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getHunger() < 80, \\\"im too hungry to play\\\");\\n        require(getSleepiness() < 80, \\\"im too sleepy to play\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to play\\\");\\n        // require(getBoredom() > 0, \\\"i dont wanna play\\\");\\n        \\n        lastPlayBlock = block.number;\\n        \\n        boredom = 0;\\n        hunger += 10;\\n        sleepiness += 10;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function sleep() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to sleep\\\");\\n        require(getSleepiness() > 0, \\\"im not feeling sleepy\\\");\\n        \\n        lastSleepBlock = block.number;\\n        \\n        sleepiness = 0;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function getStatus() public view returns (string memory) {\\n        uint256 mostNeeded = 0;\\n        \\n        string[4] memory goodStatus = [\\n            \\\"gm\\\",\\n            \\\"im feeling great\\\",\\n            \\\"all good\\\",\\n            \\\"i love u\\\"\\n        ];\\n        \\n        string memory status = goodStatus[block.number % 4];\\n        \\n        uint256 _hunger = getHunger();\\n        uint256 _uncleanliness = getUncleanliness();\\n        uint256 _boredom = getBoredom();\\n        uint256 _sleepiness = getSleepiness();\\n        \\n        if (getAlive() == false) {\\n            return \\\"no longer with us\\\";\\n        }\\n        \\n        if (_hunger > 50 && _hunger > mostNeeded) {\\n            mostNeeded = _hunger;\\n            status = \\\"im hungry\\\";\\n        }\\n        \\n        if (_uncleanliness > 50 && _uncleanliness > mostNeeded) {\\n            mostNeeded = _uncleanliness;\\n            status = \\\"i need a bath\\\";\\n        }\\n        \\n        if (_boredom > 50 && _boredom > mostNeeded) {\\n            mostNeeded = _boredom;\\n            status = \\\"im bored\\\";\\n        }\\n        \\n        if (_sleepiness > 50 && _sleepiness > mostNeeded) {\\n            mostNeeded = _sleepiness;\\n            status = \\\"im sleepy\\\";\\n        }\\n        \\n        return status;\\n    }\\n    \\n    function getAlive() public view returns (bool) {\\n        return getHunger() < 101 && getUncleanliness() < 101 &&\\n            getBoredom() < 101 && getSleepiness() < 101;\\n    }\\n    \\n    function getHunger() public view returns (uint256) {\\n        return hunger + ((block.number - lastFeedBlock) / 5000);\\n    }\\n    \\n    function getUncleanliness() public view returns (uint256) {\\n        return uncleanliness + ((block.number - lastCleanBlock) / 5000);\\n    }\\n    \\n    function getBoredom() public view returns (uint256) {\\n        return boredom + ((block.number - lastPlayBlock) / 5000);\\n    }\\n    \\n    function getSleepiness() public view returns (uint256) {\\n        return sleepiness + ((block.number - lastSleepBlock) / 5000);\\n    }\\n}\"}],\"chain\":\"5\"},{\"id\":\"ZzaGMgs7wMATGtUlKcnnV\",\"name\":\"Polygon Mumbai\",\"contracts\":[{\"id\":\"2juMqW-kURzN_roK44EPP\",\"address\":\"1eFfec4914aE4942f0b4f62573ba5F39677D1867\",\"name\":\"Miyogi - Mumbai\",\"abi\":\"[\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"caretaker\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"amount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"CaretakerLoved\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"clean\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"feed\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"play\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"sleep\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getAlive\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getBoredom\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getHunger\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getSleepiness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getStatus\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getUncleanliness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"love\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\",\"code\":\"// SPDX-License-Identifier: Unlicense\\n\\n/*\\n  Miyogi Pet by IoSan\\n  (forked from wagmi by dom)\\n*/\\n\\npragma solidity ^0.8.17;\\n\\ncontract Miyogi {\\n    address _owner;\\n    bool _birthed;\\n    \\n    event CaretakerLoved(address indexed caretaker, uint256 indexed amount);\\n    \\n    uint256 lastFeedBlock;\\n    uint256 lastCleanBlock;\\n    uint256 lastPlayBlock;\\n    uint256 lastSleepBlock;\\n    \\n    uint8 internal hunger;\\n    uint8 internal uncleanliness;\\n    uint8 internal boredom;\\n    uint8 internal sleepiness;\\n    \\n    mapping (address => uint256) public love;\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == _owner);\\n        _;\\n    }\\n    \\n    constructor() {\\n        _owner = msg.sender;\\n        lastFeedBlock = block.number;\\n        lastCleanBlock = block.number;\\n        lastPlayBlock = block.number;\\n        lastSleepBlock = block.number;\\n        \\n        hunger = 0;\\n        uncleanliness = 0;\\n        boredom = 0;\\n        sleepiness = 0;\\n    }\\n    \\n    function addLove(address caretaker, uint256 amount) internal {\\n        love[caretaker] += amount;\\n        emit CaretakerLoved(caretaker, amount);\\n    }\\n    \\n    function feed() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getBoredom() < 80, \\\"im too tired to eat\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to eat\\\");\\n        // require(getHunger() > 0, \\\"i dont need to eat\\\");\\n        \\n        lastFeedBlock = block.number;\\n        \\n        hunger = 0;\\n        boredom += 10;\\n        uncleanliness += 3;\\n\\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function clean() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() > 0, \\\"i dont need a bath\\\");\\n        lastCleanBlock = block.number;\\n        \\n        uncleanliness = 0;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function play() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getHunger() < 80, \\\"im too hungry to play\\\");\\n        require(getSleepiness() < 80, \\\"im too sleepy to play\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to play\\\");\\n        // require(getBoredom() > 0, \\\"i dont wanna play\\\");\\n        \\n        lastPlayBlock = block.number;\\n        \\n        boredom = 0;\\n        hunger += 10;\\n        sleepiness += 10;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function sleep() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to sleep\\\");\\n        require(getSleepiness() > 0, \\\"im not feeling sleepy\\\");\\n        \\n        lastSleepBlock = block.number;\\n        \\n        sleepiness = 0;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function getStatus() public view returns (string memory) {\\n        uint256 mostNeeded = 0;\\n        \\n        string[4] memory goodStatus = [\\n            \\\"gm\\\",\\n            \\\"im feeling great\\\",\\n            \\\"all good\\\",\\n            \\\"i love u\\\"\\n        ];\\n        \\n        string memory status = goodStatus[block.number % 4];\\n        \\n        uint256 _hunger = getHunger();\\n        uint256 _uncleanliness = getUncleanliness();\\n        uint256 _boredom = getBoredom();\\n        uint256 _sleepiness = getSleepiness();\\n        \\n        if (getAlive() == false) {\\n            return \\\"no longer with us\\\";\\n        }\\n        \\n        if (_hunger > 50 && _hunger > mostNeeded) {\\n            mostNeeded = _hunger;\\n            status = \\\"im hungry\\\";\\n        }\\n        \\n        if (_uncleanliness > 50 && _uncleanliness > mostNeeded) {\\n            mostNeeded = _uncleanliness;\\n            status = \\\"i need a bath\\\";\\n        }\\n        \\n        if (_boredom > 50 && _boredom > mostNeeded) {\\n            mostNeeded = _boredom;\\n            status = \\\"im bored\\\";\\n        }\\n        \\n        if (_sleepiness > 50 && _sleepiness > mostNeeded) {\\n            mostNeeded = _sleepiness;\\n            status = \\\"im sleepy\\\";\\n        }\\n        \\n        return status;\\n    }\\n    \\n    function getAlive() public view returns (bool) {\\n        return getHunger() < 101 && getUncleanliness() < 101 &&\\n            getBoredom() < 101 && getSleepiness() < 101;\\n    }\\n    \\n    function getHunger() public view returns (uint256) {\\n        return hunger + ((block.number - lastFeedBlock) / 5000);\\n    }\\n    \\n    function getUncleanliness() public view returns (uint256) {\\n        return uncleanliness + ((block.number - lastCleanBlock) / 5000);\\n    }\\n    \\n    function getBoredom() public view returns (uint256) {\\n        return boredom + ((block.number - lastPlayBlock) / 5000);\\n    }\\n    \\n    function getSleepiness() public view returns (uint256) {\\n        return sleepiness + ((block.number - lastSleepBlock) / 5000);\\n    }\\n}\"}],\"chain\":\"80001\"},{\"id\":\"-JNr36Gyf-g3h9EJ1JiLL\",\"name\":\"BSC Testnet\",\"chain\":\"97\",\"contracts\":[{\"id\":\"fibYqAR490tM0KngLA8DN\",\"address\":\"F8d8efE7d086EcbfDCA602E9011Bd5d556Dd617d\",\"name\":\"Miyogi - BSC Testnet\",\"abi\":\"[\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"caretaker\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"amount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"CaretakerLoved\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"clean\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"feed\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"play\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"sleep\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getAlive\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getBoredom\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getHunger\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getSleepiness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getStatus\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getUncleanliness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"love\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\",\"code\":\"// SPDX-License-Identifier: Unlicense\\n\\n/*\\n  Miyogi Pet by IoSan\\n  (forked from wagmi by dom)\\n*/\\n\\npragma solidity ^0.8.17;\\n\\ncontract Miyogi {\\n    address _owner;\\n    bool _birthed;\\n    \\n    event CaretakerLoved(address indexed caretaker, uint256 indexed amount);\\n    \\n    uint256 lastFeedBlock;\\n    uint256 lastCleanBlock;\\n    uint256 lastPlayBlock;\\n    uint256 lastSleepBlock;\\n    \\n    uint8 internal hunger;\\n    uint8 internal uncleanliness;\\n    uint8 internal boredom;\\n    uint8 internal sleepiness;\\n    \\n    mapping (address => uint256) public love;\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == _owner);\\n        _;\\n    }\\n    \\n    constructor() {\\n        _owner = msg.sender;\\n        lastFeedBlock = block.number;\\n        lastCleanBlock = block.number;\\n        lastPlayBlock = block.number;\\n        lastSleepBlock = block.number;\\n        \\n        hunger = 0;\\n        uncleanliness = 0;\\n        boredom = 0;\\n        sleepiness = 0;\\n    }\\n    \\n    function addLove(address caretaker, uint256 amount) internal {\\n        love[caretaker] += amount;\\n        emit CaretakerLoved(caretaker, amount);\\n    }\\n    \\n    function feed() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getBoredom() < 80, \\\"im too tired to eat\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to eat\\\");\\n        // require(getHunger() > 0, \\\"i dont need to eat\\\");\\n        \\n        lastFeedBlock = block.number;\\n        \\n        hunger = 0;\\n        boredom += 10;\\n        uncleanliness += 3;\\n\\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function clean() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() > 0, \\\"i dont need a bath\\\");\\n        lastCleanBlock = block.number;\\n        \\n        uncleanliness = 0;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function play() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getHunger() < 80, \\\"im too hungry to play\\\");\\n        require(getSleepiness() < 80, \\\"im too sleepy to play\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to play\\\");\\n        // require(getBoredom() > 0, \\\"i dont wanna play\\\");\\n        \\n        lastPlayBlock = block.number;\\n        \\n        boredom = 0;\\n        hunger += 10;\\n        sleepiness += 10;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function sleep() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to sleep\\\");\\n        require(getSleepiness() > 0, \\\"im not feeling sleepy\\\");\\n        \\n        lastSleepBlock = block.number;\\n        \\n        sleepiness = 0;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function getStatus() public view returns (string memory) {\\n        uint256 mostNeeded = 0;\\n        \\n        string[4] memory goodStatus = [\\n            \\\"gm\\\",\\n            \\\"im feeling great\\\",\\n            \\\"all good\\\",\\n            \\\"i love u\\\"\\n        ];\\n        \\n        string memory status = goodStatus[block.number % 4];\\n        \\n        uint256 _hunger = getHunger();\\n        uint256 _uncleanliness = getUncleanliness();\\n        uint256 _boredom = getBoredom();\\n        uint256 _sleepiness = getSleepiness();\\n        \\n        if (getAlive() == false) {\\n            return \\\"no longer with us\\\";\\n        }\\n        \\n        if (_hunger > 50 && _hunger > mostNeeded) {\\n            mostNeeded = _hunger;\\n            status = \\\"im hungry\\\";\\n        }\\n        \\n        if (_uncleanliness > 50 && _uncleanliness > mostNeeded) {\\n            mostNeeded = _uncleanliness;\\n            status = \\\"i need a bath\\\";\\n        }\\n        \\n        if (_boredom > 50 && _boredom > mostNeeded) {\\n            mostNeeded = _boredom;\\n            status = \\\"im bored\\\";\\n        }\\n        \\n        if (_sleepiness > 50 && _sleepiness > mostNeeded) {\\n            mostNeeded = _sleepiness;\\n            status = \\\"im sleepy\\\";\\n        }\\n        \\n        return status;\\n    }\\n    \\n    function getAlive() public view returns (bool) {\\n        return getHunger() < 101 && getUncleanliness() < 101 &&\\n            getBoredom() < 101 && getSleepiness() < 101;\\n    }\\n    \\n    function getHunger() public view returns (uint256) {\\n        return hunger + ((block.number - lastFeedBlock) / 5000);\\n    }\\n    \\n    function getUncleanliness() public view returns (uint256) {\\n        return uncleanliness + ((block.number - lastCleanBlock) / 5000);\\n    }\\n    \\n    function getBoredom() public view returns (uint256) {\\n        return boredom + ((block.number - lastPlayBlock) / 5000);\\n    }\\n    \\n    function getSleepiness() public view returns (uint256) {\\n        return sleepiness + ((block.number - lastSleepBlock) / 5000);\\n    }\\n}\"}]},{\"id\":\"Xr5S77FnzaAoYqBarKcNJ\",\"name\":\"Avalanche Fuji\",\"chain\":\"43113\",\"contracts\":[{\"id\":\"dSsiltoxqKMc7pY5T46ct\",\"address\":\"dC4f3d2eC113f0fC41599Eb014C62ED9Ed6D790B\",\"name\":\"Miyogi - AVAX Fuji\",\"abi\":\"[\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"caretaker\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"amount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"CaretakerLoved\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"clean\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"feed\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"play\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"sleep\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getAlive\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getBoredom\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getHunger\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getSleepiness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getStatus\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getUncleanliness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"love\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\",\"code\":\"// SPDX-License-Identifier: Unlicense\\n\\n/*\\n  Miyogi Pet by IoSan\\n  (forked from wagmi by dom)\\n*/\\n\\npragma solidity ^0.8.17;\\n\\ncontract Miyogi {\\n    address _owner;\\n    bool _birthed;\\n    \\n    event CaretakerLoved(address indexed caretaker, uint256 indexed amount);\\n    \\n    uint256 lastFeedBlock;\\n    uint256 lastCleanBlock;\\n    uint256 lastPlayBlock;\\n    uint256 lastSleepBlock;\\n    \\n    uint8 internal hunger;\\n    uint8 internal uncleanliness;\\n    uint8 internal boredom;\\n    uint8 internal sleepiness;\\n    \\n    mapping (address => uint256) public love;\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == _owner);\\n        _;\\n    }\\n    \\n    constructor() {\\n        _owner = msg.sender;\\n        lastFeedBlock = block.number;\\n        lastCleanBlock = block.number;\\n        lastPlayBlock = block.number;\\n        lastSleepBlock = block.number;\\n        \\n        hunger = 0;\\n        uncleanliness = 0;\\n        boredom = 0;\\n        sleepiness = 0;\\n    }\\n    \\n    function addLove(address caretaker, uint256 amount) internal {\\n        love[caretaker] += amount;\\n        emit CaretakerLoved(caretaker, amount);\\n    }\\n    \\n    function feed() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getBoredom() < 80, \\\"im too tired to eat\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to eat\\\");\\n        // require(getHunger() > 0, \\\"i dont need to eat\\\");\\n        \\n        lastFeedBlock = block.number;\\n        \\n        hunger = 0;\\n        boredom += 10;\\n        uncleanliness += 3;\\n\\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function clean() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() > 0, \\\"i dont need a bath\\\");\\n        lastCleanBlock = block.number;\\n        \\n        uncleanliness = 0;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function play() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getHunger() < 80, \\\"im too hungry to play\\\");\\n        require(getSleepiness() < 80, \\\"im too sleepy to play\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to play\\\");\\n        // require(getBoredom() > 0, \\\"i dont wanna play\\\");\\n        \\n        lastPlayBlock = block.number;\\n        \\n        boredom = 0;\\n        hunger += 10;\\n        sleepiness += 10;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function sleep() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to sleep\\\");\\n        require(getSleepiness() > 0, \\\"im not feeling sleepy\\\");\\n        \\n        lastSleepBlock = block.number;\\n        \\n        sleepiness = 0;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function getStatus() public view returns (string memory) {\\n        uint256 mostNeeded = 0;\\n        \\n        string[4] memory goodStatus = [\\n            \\\"gm\\\",\\n            \\\"im feeling great\\\",\\n            \\\"all good\\\",\\n            \\\"i love u\\\"\\n        ];\\n        \\n        string memory status = goodStatus[block.number % 4];\\n        \\n        uint256 _hunger = getHunger();\\n        uint256 _uncleanliness = getUncleanliness();\\n        uint256 _boredom = getBoredom();\\n        uint256 _sleepiness = getSleepiness();\\n        \\n        if (getAlive() == false) {\\n            return \\\"no longer with us\\\";\\n        }\\n        \\n        if (_hunger > 50 && _hunger > mostNeeded) {\\n            mostNeeded = _hunger;\\n            status = \\\"im hungry\\\";\\n        }\\n        \\n        if (_uncleanliness > 50 && _uncleanliness > mostNeeded) {\\n            mostNeeded = _uncleanliness;\\n            status = \\\"i need a bath\\\";\\n        }\\n        \\n        if (_boredom > 50 && _boredom > mostNeeded) {\\n            mostNeeded = _boredom;\\n            status = \\\"im bored\\\";\\n        }\\n        \\n        if (_sleepiness > 50 && _sleepiness > mostNeeded) {\\n            mostNeeded = _sleepiness;\\n            status = \\\"im sleepy\\\";\\n        }\\n        \\n        return status;\\n    }\\n    \\n    function getAlive() public view returns (bool) {\\n        return getHunger() < 101 && getUncleanliness() < 101 &&\\n            getBoredom() < 101 && getSleepiness() < 101;\\n    }\\n    \\n    function getHunger() public view returns (uint256) {\\n        return hunger + ((block.number - lastFeedBlock) / 5000);\\n    }\\n    \\n    function getUncleanliness() public view returns (uint256) {\\n        return uncleanliness + ((block.number - lastCleanBlock) / 5000);\\n    }\\n    \\n    function getBoredom() public view returns (uint256) {\\n        return boredom + ((block.number - lastPlayBlock) / 5000);\\n    }\\n    \\n    function getSleepiness() public view returns (uint256) {\\n        return sleepiness + ((block.number - lastSleepBlock) / 5000);\\n    }\\n}\"}]},{\"id\":\"W3loIQRX6hY0-9TGN6DJ7\",\"name\":\"Optimism Goerli\",\"chain\":\"420\",\"contracts\":[{\"id\":\"hpcg4iMrDqoSYrxLAiJ7k\",\"address\":\"dC4f3d2eC113f0fC41599Eb014C62ED9Ed6D790B\",\"name\":\"Miyogi - Optimism Goerli\",\"abi\":\"[\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"constructor\\\"\\n  },\\n  {\\n    \\\"anonymous\\\": false,\\n    \\\"inputs\\\": [\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"caretaker\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      },\\n      {\\n        \\\"indexed\\\": true,\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"amount\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"CaretakerLoved\\\",\\n    \\\"type\\\": \\\"event\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"clean\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"feed\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"play\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"sleep\\\",\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"nonpayable\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getAlive\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"bool\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"bool\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getBoredom\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getHunger\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getSleepiness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getStatus\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"string\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"getUncleanliness\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  },\\n  {\\n    \\\"inputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"address\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"address\\\"\\n      }\\n    ],\\n    \\\"name\\\": \\\"love\\\",\\n    \\\"outputs\\\": [\\n      {\\n        \\\"internalType\\\": \\\"uint256\\\",\\n        \\\"name\\\": \\\"\\\",\\n        \\\"type\\\": \\\"uint256\\\"\\n      }\\n    ],\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\",\"code\":\"// SPDX-License-Identifier: Unlicense\\n\\n/*\\n  Miyogi Pet by IoSan\\n  (forked from wagmi by dom)\\n*/\\n\\npragma solidity ^0.8.17;\\n\\ncontract Miyogi {\\n    address _owner;\\n    bool _birthed;\\n    \\n    event CaretakerLoved(address indexed caretaker, uint256 indexed amount);\\n    \\n    uint256 lastFeedBlock;\\n    uint256 lastCleanBlock;\\n    uint256 lastPlayBlock;\\n    uint256 lastSleepBlock;\\n    \\n    uint8 internal hunger;\\n    uint8 internal uncleanliness;\\n    uint8 internal boredom;\\n    uint8 internal sleepiness;\\n    \\n    mapping (address => uint256) public love;\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == _owner);\\n        _;\\n    }\\n    \\n    constructor() {\\n        _owner = msg.sender;\\n        lastFeedBlock = block.number;\\n        lastCleanBlock = block.number;\\n        lastPlayBlock = block.number;\\n        lastSleepBlock = block.number;\\n        \\n        hunger = 0;\\n        uncleanliness = 0;\\n        boredom = 0;\\n        sleepiness = 0;\\n    }\\n    \\n    function addLove(address caretaker, uint256 amount) internal {\\n        love[caretaker] += amount;\\n        emit CaretakerLoved(caretaker, amount);\\n    }\\n    \\n    function feed() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getBoredom() < 80, \\\"im too tired to eat\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to eat\\\");\\n        // require(getHunger() > 0, \\\"i dont need to eat\\\");\\n        \\n        lastFeedBlock = block.number;\\n        \\n        hunger = 0;\\n        boredom += 10;\\n        uncleanliness += 3;\\n\\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function clean() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() > 0, \\\"i dont need a bath\\\");\\n        lastCleanBlock = block.number;\\n        \\n        uncleanliness = 0;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function play() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getHunger() < 80, \\\"im too hungry to play\\\");\\n        require(getSleepiness() < 80, \\\"im too sleepy to play\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to play\\\");\\n        // require(getBoredom() > 0, \\\"i dont wanna play\\\");\\n        \\n        lastPlayBlock = block.number;\\n        \\n        boredom = 0;\\n        hunger += 10;\\n        sleepiness += 10;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function sleep() public {\\n        require(getAlive(), \\\"no longer with us\\\");\\n        require(getUncleanliness() < 80, \\\"im feeling too gross to sleep\\\");\\n        require(getSleepiness() > 0, \\\"im not feeling sleepy\\\");\\n        \\n        lastSleepBlock = block.number;\\n        \\n        sleepiness = 0;\\n        uncleanliness += 5;\\n        \\n        addLove(msg.sender, 1);\\n    }\\n    \\n    function getStatus() public view returns (string memory) {\\n        uint256 mostNeeded = 0;\\n        \\n        string[4] memory goodStatus = [\\n            \\\"gm\\\",\\n            \\\"im feeling great\\\",\\n            \\\"all good\\\",\\n            \\\"i love u\\\"\\n        ];\\n        \\n        string memory status = goodStatus[block.number % 4];\\n        \\n        uint256 _hunger = getHunger();\\n        uint256 _uncleanliness = getUncleanliness();\\n        uint256 _boredom = getBoredom();\\n        uint256 _sleepiness = getSleepiness();\\n        \\n        if (getAlive() == false) {\\n            return \\\"no longer with us\\\";\\n        }\\n        \\n        if (_hunger > 50 && _hunger > mostNeeded) {\\n            mostNeeded = _hunger;\\n            status = \\\"im hungry\\\";\\n        }\\n        \\n        if (_uncleanliness > 50 && _uncleanliness > mostNeeded) {\\n            mostNeeded = _uncleanliness;\\n            status = \\\"i need a bath\\\";\\n        }\\n        \\n        if (_boredom > 50 && _boredom > mostNeeded) {\\n            mostNeeded = _boredom;\\n            status = \\\"im bored\\\";\\n        }\\n        \\n        if (_sleepiness > 50 && _sleepiness > mostNeeded) {\\n            mostNeeded = _sleepiness;\\n            status = \\\"im sleepy\\\";\\n        }\\n        \\n        return status;\\n    }\\n    \\n    function getAlive() public view returns (bool) {\\n        return getHunger() < 101 && getUncleanliness() < 101 &&\\n            getBoredom() < 101 && getSleepiness() < 101;\\n    }\\n    \\n    function getHunger() public view returns (uint256) {\\n        return hunger + ((block.number - lastFeedBlock) / 5000);\\n    }\\n    \\n    function getUncleanliness() public view returns (uint256) {\\n        return uncleanliness + ((block.number - lastCleanBlock) / 5000);\\n    }\\n    \\n    function getBoredom() public view returns (uint256) {\\n        return boredom + ((block.number - lastPlayBlock) / 5000);\\n    }\\n    \\n    function getSleepiness() public view returns (uint256) {\\n        return sleepiness + ((block.number - lastSleepBlock) / 5000);\\n    }\\n}\"}]}]","_persist":"{\"version\":-1,\"rehydrated\":true}"}